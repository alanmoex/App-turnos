// <auto-generated />
using System;
using Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    partial class ApplicationContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.6");

            modelBuilder.Entity("Domain.Entities.Appointment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("AppointmentDateTime")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsCancelled")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MedicId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MedicalCenterId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PatientId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("MedicId");

                    b.HasIndex("MedicalCenterId");

                    b.HasIndex("PatientId");

                    b.ToTable("Appointments");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AppointmentDateTime = new DateTime(2023, 6, 21, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            IsCancelled = false,
                            MedicId = 1,
                            MedicalCenterId = 1,
                            PatientId = 1
                        },
                        new
                        {
                            Id = 2,
                            AppointmentDateTime = new DateTime(2023, 6, 22, 11, 0, 0, 0, DateTimeKind.Unspecified),
                            IsCancelled = false,
                            MedicId = 2,
                            MedicalCenterId = 2,
                            PatientId = 2
                        },
                        new
                        {
                            Id = 3,
                            AppointmentDateTime = new DateTime(2023, 6, 23, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            IsCancelled = true,
                            MedicId = 3,
                            MedicalCenterId = 1,
                            PatientId = 3
                        });
                });

            modelBuilder.Entity("Domain.Entities.Medic", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("LicenseNumber")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Medics");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            LastName = "Brown",
                            LicenseNumber = "123456",
                            Name = "Michael"
                        },
                        new
                        {
                            Id = 2,
                            LastName = "Smith",
                            LicenseNumber = "654321",
                            Name = "Jane"
                        },
                        new
                        {
                            Id = 3,
                            LastName = "Jackson",
                            LicenseNumber = "321123",
                            Name = "Peter"
                        });
                });

            modelBuilder.Entity("Domain.Entities.MedicalCenter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("MedicalCenters");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "General Hospital"
                        },
                        new
                        {
                            Id = 2,
                            Name = "City Clinic"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Specialty", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Specialties");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Cardiology"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Neurology"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Pediatrics"
                        });
                });

            modelBuilder.Entity("Domain.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasDiscriminator<string>("Discriminator").HasValue("User");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Domain.Entities.WorkSchedule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Day")
                        .HasColumnType("INTEGER");

                    b.Property<TimeSpan>("EndTime")
                        .HasColumnType("TEXT");

                    b.Property<TimeSpan>("StartTime")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("WorkSchedules");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Day = 1,
                            EndTime = new TimeSpan(0, 17, 0, 0, 0),
                            StartTime = new TimeSpan(0, 9, 0, 0, 0)
                        },
                        new
                        {
                            Id = 2,
                            Day = 2,
                            EndTime = new TimeSpan(0, 17, 0, 0, 0),
                            StartTime = new TimeSpan(0, 9, 0, 0, 0)
                        },
                        new
                        {
                            Id = 3,
                            Day = 3,
                            EndTime = new TimeSpan(0, 17, 0, 0, 0),
                            StartTime = new TimeSpan(0, 9, 0, 0, 0)
                        },
                        new
                        {
                            Id = 4,
                            Day = 4,
                            EndTime = new TimeSpan(0, 17, 0, 0, 0),
                            StartTime = new TimeSpan(0, 9, 0, 0, 0)
                        },
                        new
                        {
                            Id = 5,
                            Day = 5,
                            EndTime = new TimeSpan(0, 17, 0, 0, 0),
                            StartTime = new TimeSpan(0, 9, 0, 0, 0)
                        });
                });

            modelBuilder.Entity("MedicSpecialty", b =>
                {
                    b.Property<int>("MedicId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SpecialtiesId")
                        .HasColumnType("INTEGER");

                    b.HasKey("MedicId", "SpecialtiesId");

                    b.HasIndex("SpecialtiesId");

                    b.ToTable("MedicSpecialties", (string)null);

                    b.HasData(
                        new
                        {
                            MedicId = 1,
                            SpecialtiesId = 1
                        },
                        new
                        {
                            MedicId = 2,
                            SpecialtiesId = 1
                        },
                        new
                        {
                            MedicId = 2,
                            SpecialtiesId = 2
                        },
                        new
                        {
                            MedicId = 3,
                            SpecialtiesId = 1
                        },
                        new
                        {
                            MedicId = 3,
                            SpecialtiesId = 2
                        },
                        new
                        {
                            MedicId = 3,
                            SpecialtiesId = 3
                        });
                });

            modelBuilder.Entity("MedicWorkSchedule", b =>
                {
                    b.Property<int>("MedicId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("WorkSchedulesId")
                        .HasColumnType("INTEGER");

                    b.HasKey("MedicId", "WorkSchedulesId");

                    b.HasIndex("WorkSchedulesId");

                    b.ToTable("MedicWorkSchedules", (string)null);

                    b.HasData(
                        new
                        {
                            MedicId = 1,
                            WorkSchedulesId = 1
                        },
                        new
                        {
                            MedicId = 1,
                            WorkSchedulesId = 2
                        },
                        new
                        {
                            MedicId = 1,
                            WorkSchedulesId = 4
                        },
                        new
                        {
                            MedicId = 2,
                            WorkSchedulesId = 2
                        },
                        new
                        {
                            MedicId = 2,
                            WorkSchedulesId = 5
                        },
                        new
                        {
                            MedicId = 3,
                            WorkSchedulesId = 3
                        },
                        new
                        {
                            MedicId = 3,
                            WorkSchedulesId = 1
                        },
                        new
                        {
                            MedicId = 3,
                            WorkSchedulesId = 5
                        });
                });

            modelBuilder.Entity("MedicalCenterSpecialty", b =>
                {
                    b.Property<int>("MedicalCenterId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SpecialtiesId")
                        .HasColumnType("INTEGER");

                    b.HasKey("MedicalCenterId", "SpecialtiesId");

                    b.HasIndex("SpecialtiesId");

                    b.ToTable("MedicalCenterSpecialties", (string)null);

                    b.HasData(
                        new
                        {
                            MedicalCenterId = 1,
                            SpecialtiesId = 1
                        },
                        new
                        {
                            MedicalCenterId = 1,
                            SpecialtiesId = 2
                        },
                        new
                        {
                            MedicalCenterId = 2,
                            SpecialtiesId = 2
                        },
                        new
                        {
                            MedicalCenterId = 2,
                            SpecialtiesId = 3
                        });
                });

            modelBuilder.Entity("Domain.Entities.AdminMC", b =>
                {
                    b.HasBaseType("Domain.Entities.User");

                    b.Property<int>("MedicalCenterId")
                        .HasColumnType("INTEGER");

                    b.HasIndex("MedicalCenterId");

                    b.HasDiscriminator().HasValue("AdminMC");

                    b.HasData(
                        new
                        {
                            Id = 6,
                            Email = "admin1@example.com",
                            Name = "Admin 1",
                            Password = "password1",
                            MedicalCenterId = 1
                        },
                        new
                        {
                            Id = 7,
                            Email = "admin2@example.com",
                            Name = "Admin 2",
                            Password = "password2",
                            MedicalCenterId = 2
                        });
                });

            modelBuilder.Entity("Domain.Entities.Patient", b =>
                {
                    b.HasBaseType("Domain.Entities.User");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasDiscriminator().HasValue("Patient");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "john.doe@example.com",
                            Name = "John",
                            Password = "123",
                            LastName = "Doe"
                        },
                        new
                        {
                            Id = 2,
                            Email = "emily.johnson@example.com",
                            Name = "Emily",
                            Password = "123",
                            LastName = "Johnson"
                        },
                        new
                        {
                            Id = 3,
                            Email = "george.peterson@example.com",
                            Name = "George",
                            Password = "123",
                            LastName = "Peterson"
                        });
                });

            modelBuilder.Entity("Domain.Entities.SysAdmin", b =>
                {
                    b.HasBaseType("Domain.Entities.User");

                    b.HasDiscriminator().HasValue("SysAdmin");

                    b.HasData(
                        new
                        {
                            Id = 4,
                            Email = "admin1@example.com",
                            Name = "Admin1",
                            Password = "admin123"
                        },
                        new
                        {
                            Id = 5,
                            Email = "admin2@example.com",
                            Name = "Admin2",
                            Password = "admin123"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Appointment", b =>
                {
                    b.HasOne("Domain.Entities.Medic", "Medic")
                        .WithMany("Appointments")
                        .HasForeignKey("MedicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.MedicalCenter", "MedicalCenter")
                        .WithMany("Appointments")
                        .HasForeignKey("MedicalCenterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Patient", "Patient")
                        .WithMany("Appointments")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Medic");

                    b.Navigation("MedicalCenter");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("MedicSpecialty", b =>
                {
                    b.HasOne("Domain.Entities.Medic", null)
                        .WithMany()
                        .HasForeignKey("MedicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Specialty", null)
                        .WithMany()
                        .HasForeignKey("SpecialtiesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MedicWorkSchedule", b =>
                {
                    b.HasOne("Domain.Entities.Medic", null)
                        .WithMany()
                        .HasForeignKey("MedicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.WorkSchedule", null)
                        .WithMany()
                        .HasForeignKey("WorkSchedulesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MedicalCenterSpecialty", b =>
                {
                    b.HasOne("Domain.Entities.MedicalCenter", null)
                        .WithMany()
                        .HasForeignKey("MedicalCenterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Specialty", null)
                        .WithMany()
                        .HasForeignKey("SpecialtiesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.AdminMC", b =>
                {
                    b.HasOne("Domain.Entities.MedicalCenter", "MedicalCenter")
                        .WithMany()
                        .HasForeignKey("MedicalCenterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MedicalCenter");
                });

            modelBuilder.Entity("Domain.Entities.Medic", b =>
                {
                    b.Navigation("Appointments");
                });

            modelBuilder.Entity("Domain.Entities.MedicalCenter", b =>
                {
                    b.Navigation("Appointments");
                });

            modelBuilder.Entity("Domain.Entities.Patient", b =>
                {
                    b.Navigation("Appointments");
                });
#pragma warning restore 612, 618
        }
    }
}
